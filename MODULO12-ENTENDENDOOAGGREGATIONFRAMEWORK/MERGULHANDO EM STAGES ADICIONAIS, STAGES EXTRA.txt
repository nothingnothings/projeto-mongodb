








DEMOS UMA OLHADA EM UM MONTE DE OPERATORS,



E UM MONTE DE PIPELINE STAGES --> 
















PROFESSOR ENCORAJA A LEITURA DOS OFFICIAL DOCS... 


















--> AGORA O PROFESSOR 


VAI QUERER DAR UMA OLHADA EM 





ALGUNS STAGES QUE JÁ VIMOS ANTES,



mas que 

temos que 

'GET RIGHT' ------------> PORTANTO TEMOS QUE VER COMO 







TRABALHAMOS COM ESSES STAGES...













--> DIGAMOS QUE 









QUEREMOS 

'ENCONTRAR OS 10 USERS COM A BIRTHDATE MAIS LOW DE TODAS'....







ex de person:














{
        "_id" : ObjectId("62127db4e5b1e4e4716eb34e"),
        "gender" : "female",
        "name" : {
                "title" : "ms",
                "first" : "signe",
                "last" : "rasmussen"
        },
        "location" : {
                "street" : "3635 koldingvej",
                "city" : "ryslinge",
                "state" : "sjælland",
                "postcode" : 44840,
                "coordinates" : {
                        "latitude" : "18.2563",
                        "longitude" : "14.0142"
                },
                "timezone" : {
                        "offset" : "+4:30",
                        "description" : "Kabul"
                }
        },
        "email" : "signe.rasmussen@example.com",
        "login" : {
                "uuid" : "687099d9-b4bd-4881-8657-90abd559844f",
                "username" : "sadpeacock229",
                "password" : "baggio",
                "salt" : "J1WBRau1",
                "md5" : "2b0824d7f90452cc93a879aaf717fa40",
                "sha1" : "d7fc48d34816bccf8cac0c532b06e37e65974759",
                "sha256" : "2388d9162c447e163fdaaf94fb99bc5ca42a93de167d82eed59e296f8d1de8dd"
        },
        "dob" : {
                "date" : "1983-05-20T21:26:44Z",
                "age" : 35
        },
        "registered" : {
                "date" : "2010-09-30T04:08:40Z",
                "age" : 7
        },
        "phone" : "46945447",
        "cell" : "97293211",
        "id" : {
                "name" : "CPR",
                "value" : "082246-7576"
        },
        "picture" : {
                "large" : "https://randomuser.me/api/portraits/women/5.jpg",
                "medium" : "https://randomuser.me/api/portraits/med/women/5.jpg",
                "thumbnail" : "https://randomuser.me/api/portraits/thumb/women/5.jpg"
        },
        "nat" : "DK"
}
















----------> 




OU SEJA,





VAMOS QUERER 



USAR O AGGREGATE/find 

para 

achar 


persons 






com 


      "dob" : {
                "date" : "1983-05-20T21:26:44Z",
                "age" : 35
        },












        "dob.date" MENOR DE TODOS...










--> E AÍ,

DIGAMOS QUE 


DEPOIS DISSO VAMOS QUERER 


'FIND THE NEXT 10 PERSONS'  

,










tudo como se TIVÉSSEMOS 'PAGINATION' posta no lugar....













--> PARA ISSO,
 

 ANTES DE MAIS NADA,



 O PROFESSOR 


 VAI COLOCAR UM 


 


STAGE DE 'project'...












---> VAMOS USAR ESSA FASE DE 'project' para 


CONVERTER NOSSA DATE...











--> para isso,







provavelmente escrevermeos assim:








db.persons.aggregate(
    [
        {
            $project: {
               birthDate: {$toDate: "$dob.date"}
            }
        }
    ]
)













--> OK, ISSO VAI NOS RETORNAR TODOS OS DOCUMENTS, MAS COM APENAS OS 




FIELDS DE 
'_id'




e 


'birthDate', com essas nossas dates...







EX:









{ "_id" : ObjectId("62127db4e5b1e4e4716eb33e"), "birthDate" : ISODate("1959-03-22T14:53:41Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb33f"), "birthDate" : ISODate("1951-12-17T20:03:33Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb340"), "birthDate" : ISODate("1975-03-23T17:01:45Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb341"), "birthDate" : ISODate("1971-03-28T04:47:21Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb342"), "birthDate" : ISODate("1990-10-14T05:02:12Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb343"), "birthDate" : ISODate("1962-01-10T05:26:30Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb344"), "birthDate" : ISODate("1971-01-21T20:36:16Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb345"), "birthDate" : ISODate("1948-04-23T03:40:22Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb346"), "birthDate" : ISODate("1960-01-31T05:16:10Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb347"), "birthDate" : ISODate("1984-03-10T22:12:43Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb348"), "birthDate" : ISODate("1982-10-09T12:10:42Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb349"), "birthDate" : ISODate("1966-08-03T09:22:41Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb34a"), "birthDate" : ISODate("1970-02-18T12:38:36Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb34b"), "birthDate" : ISODate("1987-10-20T11:33:44Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb34c"), "birthDate" : ISODate("1988-11-08T00:18:59Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb34d"), "birthDate" : ISODate("1972-04-23T04:31:25Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb34e"), "birthDate" : ISODate("1983-05-20T21:26:44Z") }
















-------> a partir disso,


podemos rodar um SORT 




para sortear todos esses documents, para deixar os 



mais velhos primeiro....









ex:







db.persons.aggregate(
    [
        {
            $project: {
               birthDate: {$toDate: "$dob.date"}
            }
        },
        {
            $sort: {
                "birthDate": 1
            }
        }
    ]
)









SUCESSO:











{ "_id" : ObjectId("62127db4e5b1e4e4716eb6ae"), "birthDate" : ISODate("1944-09-07T15:52:50Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ebbfa"), "birthDate" : ISODate("1944-09-12T07:49:20Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ec476"), "birthDate" : ISODate("1944-09-13T14:58:41Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ec208"), "birthDate" : ISODate("1944-09-16T16:03:28Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ebb0a"), "birthDate" : ISODate("1944-09-17T15:04:13Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ec16e"), "birthDate" : ISODate("1944-09-18T11:03:05Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ebe71"), "birthDate" : ISODate("1944-10-02T22:56:32Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ec060"), "birthDate" : ISODate("1944-10-04T07:41:31Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ebb14"), "birthDate" : ISODate("1944-10-13T15:29:05Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ec60d"), "birthDate" : ISODate("1944-10-25T16:27:56Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb83a"), "birthDate" : ISODate("1944-10-29T02:05:56Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ec2dc"), "birthDate" : ISODate("1944-10-31T02:56:40Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ec679"), "birthDate" : ISODate("1944-11-01T20:49:03Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb63f"), "birthDate" : ISODate("1944-11-06T11:08:45Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ebe40"), "birthDate" : ISODate("1944-11-07T07:53:47Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ebdc0"), "birthDate" : ISODate("1944-11-08T02:15:17Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716eb80f"), "birthDate" : ISODate("1944-11-08T07:38:49Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ec1d0"), "birthDate" : ISODate("1944-11-17T09:16:50Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ebb37"), "birthDate" : ISODate("1944-11-22T22:51:47Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ec582"), "birthDate" : ISODate("1944-11-27T07:12:20Z") }











-----------------------------------









ok... mas agora vamos querer pegar __ SOMENTE__ 10 ELEMENTS...













--> para isso, teremos de usar 




'skip()' e 'limit()'...










EX:







db.persons.aggregate(
    [
        {
            $project: {
               birthDate: {$toDate: "$dob.date"}
            }
        },
        {
            $sort: {
                "birthDate": 1
            }
        },
        {
            $limit: 10
        }
    ]
)













-->OK, ESSE CALL DE LIMIT REALMENTE NOS DEU 10 documents:







{ "_id" : ObjectId("62127db4e5b1e4e4716eb6ae"), "birthDate" : ISODate("1944-09-07T15:52:50Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ebbfa"), "birthDate" : ISODate("1944-09-12T07:49:20Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ec476"), "birthDate" : ISODate("1944-09-13T14:58:41Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ec208"), "birthDate" : ISODate("1944-09-16T16:03:28Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ebb0a"), "birthDate" : ISODate("1944-09-17T15:04:13Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ec16e"), "birthDate" : ISODate("1944-09-18T11:03:05Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ebe71"), "birthDate" : ISODate("1944-10-02T22:56:32Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ec060"), "birthDate" : ISODate("1944-10-04T07:41:31Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ebb14"), "birthDate" : ISODate("1944-10-13T15:29:05Z") }
{ "_id" : ObjectId("62127db4e5b1e4e4716ec60d"), "birthDate" : ISODate("1944-10-25T16:27:56Z") }













---------> entretanto, 







e se tivéssemos PAGINATION NO LUGAR?







como  ficaria isso? 








-> eu precisaria 




colocar o 'skip()'




ali dentro, para então 


skippar 



nossos elements de acordo com a page....









db.persons.aggregate(
    [
        {
            $project: {
               birthDate: {$toDate: "$dob.date"}
            }
        },
        {
            $sort: {
                "birthDate": 1
            }
        },
        {
            $skip: 10
        }
        {
            $limit: 10
        }
    ]
)
















OK.... CONSEGUI... FICOU ASSIM:













db.persons.aggregate(
  [
      {
          $project: {
             birthDate: {$toDate: "$dob.date"}
          }
      },
      {
          $sort: {
              "birthDate": 1
          }
      },
      {
          $limit: 10
      }
  ]
)






///''página 2'' (pagination)...



db.persons.aggregate(
  [
      {
          $project: {
             birthDate: {$toDate: "$dob.date"}
          }
      },
      {
          $sort: {
              "birthDate": 1
          }
      },
      {
          $skip: 10
      },
      {
          $limit: 10
      }
  ]
)






//página 3:









db.persons.aggregate(
  [
      {
          $project: {
             birthDate: {$toDate: "$dob.date"}
          }
      },
      {
          $sort: {
              "birthDate": 1
          }
      },
      {
          $skip: 20
      },
      {
          $limit: 10
      }
  ]
)








------------------------------------------




















certo.... --> mas na versão do professor, ele tira o '_id',


mantém o 'name',



e aí 



CONVERTE o field de 'date',

exatamente como fizemos....












ex:





db.persons.aggregate(
    [
        {
            $project: {
                _id: 0,
                name: 1,
                birthDate: {
                    $toDate: "$dob.date"
                }
            }
        },
        {
            $sort: {
                "birthDate": 1
            }
        }
    ]
)










--> OK, ISSO AÍ NOS RETORNA 





PRETTY OLD PEOPLE,




com 



1944-09-07 (7 de setembro)....












-------> AGORA SÓ VAMOS QUERER VER OS 'TOP 10 OLDEST' ----> 












aí o professor usa o 



stage de 'limit',

exatamente como fiz:








db.persons.aggregate(
    [
        {
            $project: {
                _id: 0,
                name: 1,
                birthDate: {
                    $toDate: "$dob.date"
                }
            }
        },
        {
            $sort: {
                "birthDate": 1
            }
        },

        {
            $limit: 10
        }
    ]
)


















PROFESSOR COMPLEMENTA UM POUCO:










db.persons.aggregate(
  [
      {
          $project: {
              _id: 0,
              name: {
                  $concat: ["$name.first", " ", "$name.last"]
              },
              birthDate: {
                  $toDate: "$dob.date"
              }
          }
      },
      {
          $sort: {
              "birthDate": 1
          }
      },

      {
          $limit: 10
      }
  ]
)








> db.persons.aggregate(
...   [
...       {
...           $project: {
...               _id: 0,
...               name: {
...                   $concat: ["$name.first", " ", "$name.last"]
...               },
...               birthDate: {
...                   $toDate: "$dob.date"
...               }
...           }
...       },
...       {
...           $sort: {
...               "birthDate": 1
...           }
...       },
...
...       {
...           $limit: 10
...       }
...   ]
... )
{ "name" : "victoria hale", "birthDate" : ISODate("1944-09-07T15:52:50Z") }
{ "name" : "عباس یاسمی", "birthDate" : ISODate("1944-09-12T07:49:20Z") }
{ "name" : "erundina porto", "birthDate" : ISODate("1944-09-13T14:58:41Z") }
{ "name" : "پرهام جعفری", "birthDate" : ISODate("1944-09-16T16:03:28Z") }
{ "name" : "eli henry", "birthDate" : ISODate("1944-09-17T15:04:13Z") }
{ "name" : "kirk brown", "birthDate" : ISODate("1944-09-18T11:03:05Z") }
{ "name" : "alexis bélanger", "birthDate" : ISODate("1944-10-02T22:56:32Z") }
{ "name" : "gina beck", "birthDate" : ISODate("1944-10-04T07:41:31Z") }
{ "name" : "sebastian olsen", "birthDate" : ISODate("1944-10-13T15:29:05Z") }
{ "name" : "lucy wilson", "birthDate" : ISODate("1944-10-25T16:27:56Z") }























--> AÍ O PROFESSOR ADICIONA 'PAGINATION'


por meio de 

'skip',



tipo assim:





db.persons.aggregate(
  [
      {
          $project: {
              _id: 0,
              name: {
                  $concat: ["$name.first", " ", "$name.last"]
              },
              birthDate: {
                  $toDate: "$dob.date"
              }
          }
      },
      {
          $sort: {
              "birthDate": 1
          }
      },

      {

          $skip: 10
      }

      {
          $limit: 10
      }
  ]
)















--> MAS O QUE REALMENTE INTERESSA É  A 




__oRDEM __ DE EXECUÇAÕ DE 



'SORT' - 'SKIP' - 'LIMIT'...











--> NO METHOD DE FIND, A ORDER NÃO INTERESSAVA,


MAS 

AQUI 

INTERESSA,

PQ 
SUA 


PIPELINE 


É 



PROCESSADA 'STEP BY STEP' ---------->










pq se sortarmos por último, vamos 







SORTAR SÓ A FAIXA DE RESULTS QUE É RETORNADA, E NÃO 




TODAS AS COISAS NA NOSSA DATABASE (

    muda tudo, essencialmente...
)















--> mesma coisa se tivermos 'match' ---------> 





se deixarmos 

'$match: {
    gender: "male"
}' 


NO INÍCIO,


VAMOS GANHAR UMA GRANDE 

FAIXA 

DE 



DOCUMENTS DE NOSSA COLLECTION... --> JÁ SE FIZERMOS ESSE MATCH 

LÁ 

NO FINAL 




das steps,




VAMOS 



PEGAR SÓ ALGUNS DE NOSSOS DOCUMENTS... 











----> POSSO FAZER MATCH __ DEPOIS __ DO SORTING, SE EU QUISER.... ---> 




e se eu não tiver 'gender' 



na minha PROJECTION,

NÃO VOU ENCONTRAR DOCUMENT ALGUM,...












-> É POR ISSO QUE VOCÊ DEVE TER A ORDEM DAS ETAPAS EM SUA MENTE, QUANDO USAR a 'aggregation pipeline'...









--> MATCH GERALMENTE 

DEVE SER EXECUTADO 


COMO 
PRIMEIRA PHASE....














-> ENTRETANTO,

O MONGODB



VAI FAZER ALGUMAS OPTIMIZATIONS PARA NÓS,

automaticamente,

para 

optimizar nossa pipeline --> 



MAS VOCÊ NÃO DEVE CONFIAR MT NISSO;


DEVE 

TENTAR 



ESCREVER SUAS PIPELINES NA ORDEM CORRETA,





construir o tipo de estrutura que você quer ter..


