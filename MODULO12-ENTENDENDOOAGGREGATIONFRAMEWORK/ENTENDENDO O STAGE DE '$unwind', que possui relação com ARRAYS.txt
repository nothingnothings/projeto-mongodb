








NA ÚLTIMA AULA,

VIMOS 






COMO PODEMOS 'PUSH ELEMENTS INTO NEWLY CREATED ARRAYS':












FIZEMOS TIPO ASSIM:







db.arrayCollection.aggregate([
...     {
...       $group: {
...         _id: {
...           personAge: '$age',
...         },
...         allHobbies: { $push: '$hobbies' }
...       },
...     },
...   ]).pretty();
{
        "_id" : {
                "personAge" : 29
        },
        "allHobbies" : [
                [
                        "Cooking",
                        "Skiing"
                ],
                [
                        "Sports",
                        "Cooking"
                ]
        ]
}
{
        "_id" : {
                "personAge" : 30
        },
        "allHobbies" : [
                [
                        "Eating",
                        "Data Analytics"
                ]
        ]
}
>

















--> ESSE NEWLY CREATED ARRAY é 'allHobbies'...











--> E ESSES VALORES QUE FIZEMOS 'PUSH' PARA DENTRO 


DESSE NEWLY CREATED ARRAY


NÃO PRECISAM SER OBRIGATORIAMENTE ARRAYS --> podemos/poderíamos ter pushado 







STRINGS, por exemplo..... --> poderíamos ter pushado as AGES, ou os 'name'... --> ISSO TAMBÉM FUNCIONARIA... --> 











poderíamos ter um array com todas as ages/names do group (de cada group)... 














MAS O QUE O PROFESSOR QUER FAZER É 


PEGAR ESSES NESTED ARRAYS AQUI:






        "allHobbies" : [
                [
                        "Cooking",
                        "Skiing"
                ],
                [
                        "Sports",
                        "Cooking"
                ]
        ]










        E OS ESPALHAR NO ROOT _ DESSE _ ARRAY DE 'allHobbies'....












--> PARA ISSO,


PARA CONSEGUIR REALIZAR ESSA OPERAÇÃO,






O PROFESSOR ADICIONA UM __ NOVO __ PIPELINE STAGE,



DIFERENTE DE 







'match' 



'group' 



e 



'project',


QUE AINDA NÃO VIMOS ANTES....











--> É O STAGE DE 'unwind' --> ESSE STAGE É SEMPRE ÓTIMO QUANDO VOCê TEM UM  ARRAY EM QUE VOCÊ QUER 'PULL OUT THE ELEMENTS'...















 -->  O UNWIND É ESCRITO ASSIM:







 {
     $unwind: 
 }

















 -----------> PARA ENTENDERMOS PERFEITAMENTE O QUE FAZ O UNWIND,


 o professor 



TEMPORARIAMENTE 






DEIXA SÓ O STAGE DE UNWIND NA NOSSA AGGREGATE QUERY...










ex:









db.arrayCollection.aggregate(
    [
        {$unwind: {}}
    ]
).pretty()








-------------------------------------------
















-----------> NA VERDADE, O UNWIND TEM 2 DIFERENTES SINTAXES (você pode consultar os docs para mais informaçõeS)....













--> SUA USAGE MAIS COMUM É _ SIMPLESMENTE__ PASSAR __ O NOME DO FIELD __ QUE 


SEGURA 


UM ARRAY.... --> NO CASO,

PASSAREMOS 
'$hobbies'...












ex:












db.arrayCollection.aggregate(
    [
        {$unwind: "$hobbies"}
    ]
).pretty()



---------------------------------











-> OK, O UNWIND SERÁ APLICADO SOBRE ESSE 'hobbies' -----------> 











MAS O QUE DIABOS 'unwind' 

FAZ? 












--> BEM, SE SALVARMOS E EXECUTARMOS ESSA QUERY,

OBTEMOS:















>   db.arrayCollection.aggregate(
...     [
...         {$unwind: "$hobbies"}
...     ]
... ).pretty()




{
        "_id" : ObjectId("6215b908ecbbf58f4c1d5e59"),
        "name" : "Maria",
        "hobbies" : "Cooking",
        "age" : 29,
        "examScores" : [
                {
                        "difficulty" : 3,
                        "score" : 75.1
                },
                {
                        "difficulty" : 8,
                        "score" : 44.2
                },
                {
                        "difficulty" : 6,
                        "score" : 61.5
                }
        ]
}



{
        "_id" : ObjectId("6215b908ecbbf58f4c1d5e59"),
        "name" : "Maria",
        "hobbies" : "Skiing",
        "age" : 29,
        "examScores" : [
                {
                        "difficulty" : 3,
                        "score" : 75.1
                },
                {
                        "difficulty" : 8,
                        "score" : 44.2
                },
                {
                        "difficulty" : 6,
                        "score" : 61.5
                }
        ]
}


{
        "_id" : ObjectId("6215b908ecbbf58f4c1d5e5a"),
        "name" : "Manu",
        "hobbies" : "Eating",
        "age" : 30,
        "examScores" : [
                {
                        "difficulty" : 7,
                        "score" : 52.1
                },
                {
                        "difficulty" : 2,
                        "score" : 74.3
                },
                {
                        "difficulty" : 5,
                        "score" : 53.1
                }
        ]
}




{
        "_id" : ObjectId("6215b908ecbbf58f4c1d5e5a"),
        "name" : "Manu",
        "hobbies" : "Data Analytics",
        "age" : 30,
        "examScores" : [
                {
                        "difficulty" : 7,
                        "score" : 52.1
                },
                {
                        "difficulty" : 2,
                        "score" : 74.3
                },
                {
                        "difficulty" : 5,
                        "score" : 53.1
                }
        ]
}




{
        "_id" : ObjectId("6215b908ecbbf58f4c1d5e5b"),
        "name" : "Max",
        "hobbies" : "Sports",
        "age" : 29,
        "examScores" : [
                {
                        "difficulty" : 4,
                        "score" : 57.9
                },
                {
                        "difficulty" : 6,
                        "score" : 62.1
                },
                {
                        "difficulty" : 3,
                        "score" : 88.5
                }
        ]
}


{
        "_id" : ObjectId("6215b908ecbbf58f4c1d5e5b"),
        "name" : "Max",
        "hobbies" : "Cooking",
        "age" : 29,
        "examScores" : [
                {
                        "difficulty" : 4,
                        "score" : 57.9
                },
                {
                        "difficulty" : 6,
                        "score" : 62.1
                },
                {
                        "difficulty" : 3,
                        "score" : 88.5
                }
        ]
}













-> GANHAMOS 6 DOCUMENTS DIFERENTES....










--> GANHAMOS __ BEM MAIS ___ DOCUMENTS DO QUE ORIGINALMENTE TÍNHAMOS (pq tínhamos com só 3 documents)....


















-------> E CADA DOCUMENT vai ter apenas 1 'PEDAÇO' (1 value) 


DAQUELE ARRAY,




E aí REPETIRÁ OS MESMOS VALORES, NOS OUTROS FIELDS....















-> ISSO SIGNIFICA QUE 



O 



'$unwind'


BASICAMENTE 


'FLATTENS' O ARRAY,




POR MEIO DO REPEAT DO DOCUMENT QUE SEGURAVA O __ ARRAY__  QUANTAS VEZES FOREM NECESSÁRIAS,



PARA ENTÃO 


'
MERGE IT WITH THE ARRAY ELEMENTS'...












--> O DOCUMENT É REPETIDO VÁRIAS VEZES,

cada vez com 1 'pedaço' do array dentro 
 

daquela key de 'hobbies'...
















MAX WITH SPORTS,

MAX WITH COOKING...











-> ISSO SIGNIFICA QUE 'UNWIND' É O ___OPOSTO__ DE GROUP--->











pq group  FAZ ___ MERGE_ DE MÚLTIPLOS DOCUMENTS EM 1 ÚNICO DOCUMENT....








E O 'UNWIND' faz o contrário, PEGA 1 ÚNICO DOCUMENT,

E A PARTIR DE SEU ARRAY, __ 'SPITS OUT MULTIPLE DOCUMENTS'...











--> E, COM ISSO,





vamos 


QUERER FAZER 'GROUP' MAIS UMA VEZ,


MAS AGORA 



NÃO VAMOS QUERER 




USAR AQUELE 'hobbies'


QUE 


era 

um 


ARRAY dentro de nosso document,

e sim 

VAMOS 

SÓ 



PEGAR 




ESSE 'hobbies' que 

será 

sempre coisas como 


'hobbies: sports' 



'hobbies: skiing'


e aí 


SOMAR TODOS ESSES HOBBIES PARA DENTRO DE 

'allHobbies',








na etapa de 'group'....
















ISSO SIGNIFICA QUE NOSSA QUERY FICA ASSIM:







EX:










db.arrayCollection.aggregate([
    {$unwind: "$hobbies"}

    {
      $group: {
        _id: {
          personAge: '$age',
        },
        allHobbies: { $push: '$hobbies' }
      },
    },
  ]).pretty();









  --------------------------















  FUNCIONOU, NOSSO OUTPUT FICOU BEM DIFERENTE:












  db.arrayCollection.aggregate([
...   {$unwind: "$hobbies"},
...   {
...     $group: {
...       _id: {
...         personAge: '$age',
...       },
...       allHobbies: { $push: '$hobbies' }
...     },
...   },
... ]).pretty();





{
        "_id" : {
                "personAge" : 29
        },
        "allHobbies" : [
                "Cooking",
                "Skiing",
                "Sports",
                "Cooking"
        ]
}
{
        "_id" : {
                "personAge" : 30
        },
        "allHobbies" : [
                "Eating",
                "Data Analytics"
        ]
}





-----------------------------------









2 groups, o primeiro vai ter aqueles '4 hobbies' (1 deles é repetido, 'cooking'),



e o segundo vai 


ter 


só 

2 HOBBIES.....












----> ok... --> MAS ESSA EXISTÊNCIA DE 'DUPLICATE VALUES'



PODE SER UM INCÔMODO, POR ISSO VAMOS VER O QUE PODEMOS FAZER QUANTO A ISSO....