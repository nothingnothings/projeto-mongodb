










COM TODAS AS PROJECTIONS QUE VIMOS ATÉ AGORA,


DEVEMOS 

ADICIONAR UM OUTRO 'GROUP STAGE' . -- > 













VAMOS READICIONAR UM GROUP STAGE NO NOSSO CÓDIGO,
LOGO 


ABAIXO 






DA EXECUÇAÕ DE '$project',

tipo assim:












db.persons.aggregate(
    [
        {$project: {...}},
        {$group: {...}}
    ]
)



















--> ESCREVEMOS TIPO ASSIM:





  db.persons.aggregate([
    {
      $project: {
        _id: 0,
        gender: 1,
        personAge: '$dob.age',
        'date of birth': { $toDate:"$dob.date"},
        fullName: {
          $concat: [
            { $toUpper: { $substrCP: ['$name.first', 0, 1] } },
            {
              $substrCP: [
                '$name.first',
                1,
                { $subtract: [{ $strLenCP: '$name.first' }, 1] },
              ],
            },
            ' ',
            { $toUpper: { $substrCP: ['$name.last', 0, 1] } },
            {
              $substrCP: [
                '$name.last',
                1,
                { $subtract: [{ $strLenCP: '$name.first' }, 1] },
              ],
            },
          ],
        },

        location: {
          type: 'Point',
          coordinates: [
            { $toDouble: '$location.coordinates.longitude' },
            { $toDouble: '$location.coordinates.latitude' },
          ],
        },
      },
    },



    {
        $group: {

        }
    }








  ]).pretty()





















  ----> ESSE É UM CENÁRIO BEM COMUM:




  '''VOCÊ PRIMEIRAMENTE REESTRUTURA SUA DATA,
  CALCULA ALGUNS FIELDS,


ADICIONA ALGUNS BRAND NEW FIELDS QUE NÃO EXISTIAM ANTES''' --> aí, a partir desses 





''DERIVED FIELDS''',



você VAI QUERER AGRUPAR SUA DATA... ----------> 




NO NOSSO CASO,




O PROFESSOR 


VAI QUERER FAZER 'GROUP' 




em cima 




DO FIELD DE 


'date of birth'... (que  está em um formato 'ISODate()', agora....)



 










 ----> QUANDO UMA DATA ESTÁ NESSE FORMATO 'ISODate',



 podemos 




 FAZER 'GROUP BY' ela... -------> 










 PARA ISSO,



 o professor vai usar o stage de 'GROUP'...











 --> PARA USAR O GROUP STAGE,


 DEVEMOS OBRIGATORIAMETNE 


 usar 



 '_id'...








 --> DENTRO DO '_id',


 definimos 



 'POR QUAL VALUE VAMOS QUERER AGRUPAR....












 -> no caso,

 vmaos escrever 







 {
     $group: {
         _id: {
             chosenDate: "$date of birth"
         }
     }
 }












 --> CERTO, MAS NÃO VAMOS QUERER 'GROUP BY THE DATE',



 E SIM 



 __ VAMOS QUERER _ AGRUPAR PELO 'BIRTHYEAR' (ano de nascimento)... 
 (
     é por isso que trocaremos o nome dessa key, que não faz mt diferença,
     só muda o nome do field quando essa data for retornada/outputtada/retrievada por nossa query...
 )










 eX:








  {
     $group: {
         _id: {
                birthYear: "$date of birth"
         }
     }
 }









 -----------> É CLARO QUE, PARA PEGAR O 'BIRTH YEAr',

 VAMOS PRECISAR 

 RODAR UMA OPERAÇÃO 






 NO NOSSO 'date of birth',


 QUE 

 ATÉ 

 AGORA TERÁ UM FORMATO de 




      "date of birth" : ISODate("1983-05-20T21:26:44Z"),










-------> NO JAVASCRIPT, TÍNHAMOS 'getYear()'... --> mas aqui NÃO TEMOS ISSO..









--> AQUI, PARA CONSEGUIRMOS O ANO DE UMA DATA,




SOMOS FORÇADOS A USAR O OPERATOR DE '$isoYear'...












--> ENTÃO USAMOS ESSE '$isoYear',



tipo assim:







  {
     $group: {
         _id: {
                birthYear: {$isoYear: "$date of birth"}
         }
     }
 }











--> ISSO VAI 'RETRIEVAR O YEAR LÁ DE UMA ISODate'...








ex:




  db.persons.aggregate([
    {
      $project: {
        _id: 0,
        gender: 1,
        personAge: '$dob.age',
        'date of birth': { $toDate:"$dob.date"},
        fullName: {
          $concat: [
            { $toUpper: { $substrCP: ['$name.first', 0, 1] } },
            {
              $substrCP: [
                '$name.first',
                1,
                { $subtract: [{ $strLenCP: '$name.first' }, 1] },
              ],
            },
            ' ',
            { $toUpper: { $substrCP: ['$name.last', 0, 1] } },
            {
              $substrCP: [
                '$name.last',
                1,
                { $subtract: [{ $strLenCP: '$name.first' }, 1] },
              ],
            },
          ],
        },

        location: {
          type: 'Point',
          coordinates: [
            { $toDouble: '$location.coordinates.longitude' },
            { $toDouble: '$location.coordinates.latitude' },
          ],
        },
      },
    },






    {
        $group: {
         _id: {
                birthYear: {$isoYear: "$date of birth"}
         }
     }
    }










    TIPO ASSIM:









    db.persons.aggregate([
  {
    $project: {
      _id: 0,
      gender: 1,
      personAge: '$dob.age',
      'date of birth': { $toDate: '$dob.date' },
      fullName: {
        $concat: [
          { $toUpper: { $substrCP: ['$name.first', 0, 1] } },
          {
            $substrCP: [
              '$name.first',
              1,
              { $subtract: [{ $strLenCP: '$name.first' }, 1] },
            ],
          },
          ' ',
          { $toUpper: { $substrCP: ['$name.last', 0, 1] } },
          {
            $substrCP: [
              '$name.last',
              1,
              { $subtract: [{ $strLenCP: '$name.first' }, 1] },
            ],
          },
        ],
      },

      location: {
        type: 'Point',
        coordinates: [
          { $toDouble: '$location.coordinates.longitude' },
          { $toDouble: '$location.coordinates.latitude' },
        ],
      },
    },
  },

  {
    $group: {
      _id: {
        birthYear: { $isoYear: '$date of birth' },
      },
    },
  },
]);





















--> CERTO... MAS ISSO IMEDIATAMENTE ME DEU UM ERRO...



} on connection: connection to 127.0.0.1:27017 : aggregate failed :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:18:14
_assertCommandWorked@src/mongo/shell/assert.js:737:17
assert.commandWorked@src/mongo/shell/assert.js:829:16
DB.prototype._runAggregate@src/mongo/shell/db.js:281:5
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1058:12
@(shell):1:1







---> ISSO ACONTECEU PQ 

__ NÃO PASSAMOS UM SEGUNDO PARÂMETRO A 


'$group' (além do 'id')....












--> PARA ISSO,



professor escreve:
 



 {
     $group: {
         _id: {...},

         numPersons: 
     }
 }













 --> ELE CRIA ESSE 'numPersons,'

 QUE VAI SER UM USO de '$sum'...














 --> CERTO...  




 DENTRO DE 'numPersons'
 


 '$sum: 1',


 O QUE  QUER DIZER QUE 


 SERÁ 'ADICIONADO 1 DOCUMENT/número'  QUANDO 







 ESSE DOCUMENT FOR ENVIADO. ------> E ISSO SERÁ 






 FEITO, APARECERÁ 


 NO RESULTADO DE NOSSA QUERY,


 para 

 todas as persons que tiverem BIRTHDATE igual a esse number aí.... (E o negócio será sortado)...













 Ex:








   {
    $project: {
      _id: 0,
      gender: 1,
      personAge: '$dob.age',
      'date of birth': { $toDate: '$dob.date' },
      fullName: {
        $concat: [
          { $toUpper: { $substrCP: ['$name.first', 0, 1] } },
          {
            $substrCP: [
              '$name.first',
              1,
              { $subtract: [{ $strLenCP: '$name.first' }, 1] },
            ],
          },
          ' ',
          { $toUpper: { $substrCP: ['$name.last', 0, 1] } },
          {
            $substrCP: [
              '$name.last',
              1,
              { $subtract: [{ $strLenCP: '$name.first' }, 1] },
            ],
          },
        ],
      },

      location: {
        type: 'Point',
        coordinates: [
          { $toDouble: '$location.coordinates.longitude' },
          { $toDouble: '$location.coordinates.latitude' },
        ],
      },
    },
  },

  {
    $group: {
      _id: {
        birthYear: { $isoYear: '$date of birth' },
      },
    },
  },
]);











---> OK, MAS ISSO ME __ DEU UM ERRO___....









on connection: connection to 127.0.0.1:27017 : aggregate failed :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:18:14
_assertCommandWorked@src/mongo/shell/assert.js:737:17
assert.commandWorked@src/mongo/shell/assert.js:829:16
DB.prototype._runAggregate@src/mongo/shell/db.js:281:5
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1058:12
@(shell):1:1



















-------> o professor explica que é pq usamos 


'$isoWeek' 


em vez de 

'$isoWeekYear' 



(ESSE É O NOME VERDADEIRO DO NEGÓCIO).....







EX:












{ "_id" : { "birthYear" : NumberLong(1968) } }
{ "_id" : { "birthYear" : NumberLong(1950) } }
{ "_id" : { "birthYear" : NumberLong(1944) } }
{ "_id" : { "birthYear" : NumberLong(1994) } }
{ "_id" : { "birthYear" : NumberLong(1992) } }
{ "_id" : { "birthYear" : NumberLong(1980) } }
{ "_id" : { "birthYear" : NumberLong(1962) } }
{ "_id" : { "birthYear" : NumberLong(1975) } }
{ "_id" : { "birthYear" : NumberLong(1954) } }
{ "_id" : { "birthYear" : NumberLong(1956) } }
{ "_id" : { "birthYear" : NumberLong(1977) } }
{ "_id" : { "birthYear" : NumberLong(1996) } }
{ "_id" : { "birthYear" : NumberLong(1971) } }
{ "_id" : { "birthYear" : NumberLong(1947) } }
{ "_id" : { "birthYear" : NumberLong(1961) } }
{ "_id" : { "birthYear" : NumberLong(1960) } }
{ "_id" : { "birthYear" : NumberLong(1989) } }
{ "_id" : { "birthYear" : NumberLong(1963) } }
{ "_id" : { "birthYear" : NumberLong(1945) } }
{ "_id" : { "birthYear" : NumberLong(1951) } }
Type "it" for more

















--> É CLARO QUE, POR ENQUANTO,


ESTAMOS DESCARTANDO TODAS AS TRANSFORMATIONS OCORRIDAS anteriorente,

aquelas 

transformations de '$substrCP',


etc etc.... ----> MAS ISSO É SÓ TEMPORÁRIO
,



PQ O PROFESOSO 





SÓ QUERIA NOS MOSTRAR QUE PODEMOS 'GROUP' 

njos resultados de projec.t............










ok.... ele escreve isto:





db.persons.aggregate([
  {
    $project: {
      _id: 0,
      gender: 1,
      personAge: '$dob.age',
      'date of birth': { $toDate: '$dob.date' },
      fullName: {
        $concat: [
          { $toUpper: { $substrCP: ['$name.first', 0, 1] } },
          {
            $substrCP: [
              '$name.first',
              1,
              { $subtract: [{ $strLenCP: '$name.first' }, 1] },
            ],
          },
          ' ',
          { $toUpper: { $substrCP: ['$name.last', 0, 1] } },
          {
            $substrCP: [
              '$name.last',
              1,
              { $subtract: [{ $strLenCP: '$name.first' }, 1] },
            ],
          },
        ],
      },

      location: {
        type: 'Point',
        coordinates: [
          { $toDouble: '$location.coordinates.longitude' },
          { $toDouble: '$location.coordinates.latitude' },
        ],
      },
    },
  },
  {
    $group: {
      _id: {
        birthYear: { $isoWee









        O OUTPUT FICOU ASSIM:

        { "_id" : { "birthYear" : NumberLong(1968) } }
{ "_id" : { "birthYear" : NumberLong(1950) } }
{ "_id" : { "birthYear" : NumberLong(1944) } }
{ "_id" : { "birthYear" : NumberLong(1994) } }
{ "_id" : { "birthYear" : NumberLong(1992) } }
{ "_id" : { "birthYear" : NumberLong(1980) } }
{ "_id" : { "birthYear" : NumberLong(1962) } }
{ "_id" : { "birthYear" : NumberLong(1975) } }
{ "_id" : { "birthYear" : NumberLong(1954) } }
{ "_id" : { "birthYear" : NumberLong(1956) } }
{ "_id" : { "birthYear" : NumberLong(1977) } }
{ "_id" : { "birthYear" : NumberLong(1996) } }
{ "_id" : { "birthYear" : NumberLong(1971) } }
{ "_id" : { "birthYear" : NumberLong(1947) } }
{ "_id" : { "birthYear" : NumberLong(1961) } }
{ "_id" : { "birthYear" : NumberLong(1960) } }
{ "_id" : { "birthYear" : NumberLong(1989) } }
{ "_id" : { "birthYear" : NumberLong(1963) } }
{ "_id" : { "birthYear" : NumberLong(1945) } }
{ "_id" : { "birthYear" : NumberLong(1951) } }
Type "it" for more