















--> OK... AGORA É HORA DE PARTIRMOS PARA A PRÓXIMA ETAPA,

QUE É O CREATE DE USERS 

NA NOSSA DATABASE....













--> ISSO POSA UMA PERGUNTA:






como devemos estruturar nossa data?











os 



products devem ficar dentro de cada user?










--> bem, teremos diferentes TIPOS DE USERS 


na nossa shop...








--> esses users que vemos agora são PROVAVELMENTE ADMINS,



por isso 





precisamos que 

CADA 




PRODUCT TENHA UM 'userId' 


vinculando 1 user a si....













--> AUTHENTICATION, ESSE É O ASSUNTO, AGORA...











--> temos aquele button de 'logout', que no momento não faz o logout de verdade, só nos redireciona para uma page 

de 


'localhost:3000/auth'....













--> A POSSIBILIDADE DE PODER FAZER 'LOGIN' 



no meu 


app 



NÃO ESTÁ NADA RELACIONADA COM O MONGODB...









--> isso é algo de BACKEND.. ----> pessoas não podem fazer login 





na database,


e sim 




FAZEM 

ISSO NO BACKEND...












---> O USER/CLIENT QUE SE CONECTA É O 



'NODEAPP' ... -------> e não 






o react frontend, e certamente não os users de seu app....



















-------> QUEREMOS ALGUNS USERS NO NOSSO APP,




por isso deixamos a opção de CREATE USERS,

mas 

os 

users de seu app


NÃO SERÃO CAPAZES DE ACESSAR A DATABASE,



isso 


é 

algo que
 


 SÓ O 



 NODEJS APP vai conseguir fazer..









 --> lá nas routes de 'auth.js'



 O PROFESSOR 

 JÁ TEM UM CÓDIGO SETTADO PARA 'SIGNING USERS UP' 


 e 

 'LOGGING  USERS IN '...









 SÃO OS CÓDIGOS DE :














 router.post('/login', (req, res, next) => {
  const email = req.body.email;
  const password = req.body.passsword;

  //CHECK IF USER LOGIN IS VALID  (authentication)

  const db = getDb();

  db.collection('users');


  //IF YES, CREATE TOKEN AND RETURN IT TO CLIENT
  const token = createToken();
  //res.status(200).json({token: token, user: {email: "dummy@dummy.com"}})

  res
    .status(401)
    .json({ message: 'Authentication failed, invalid username or password.' });
});

router.post('/signup', (req, res, next) => {
  const email = req.body.email;
  const password = req.body.password;

  bcrypt
    .hash(password, 12)
    .then((hashedPassword) => {
      //Store hashedPassword in Database....
      console.log(hashedPassword);

      const token = createToken();
      res
        .status(201)
        .json({ token: token, user: { email: 'dummy@dummy.com' } });
    })
    .catch((err) => {
      console.log(err);
      res.status(500).json({ message: 'Creating the user failed' });
    });
  ///ADD USER TO DATABASE....
});















-----------------------










--> VAMOS COMEÇAR PELO 'CREATE DE USERS'... --> é mais fácil...








--> vamos querer nos conectar à database mongo....








--> AÍ USAR UMA COLLECTION DIFERENTE, CHAMADA DE 'users'...








--> AÍ DEVEMOS CRIAR 1 DOCUMENT 'user',

que 

será 


'email' e 'password' ---> o password será armazenado de forma HASHEADA...









TIPO ALGO ASSIM:








router.post('/signup', (req, res, next) => {
  const email = req.body.email;
  const password = req.body.password;

  const db = getDb();

  bcrypt
    .hash(password, 12)
    .then((hashedPassword) => {
      //Store hashedPassword in Database....
      console.log(hashedPassword);
      db.collection('users')
        .insertOne({
          email: email,
          password: hashedPassword,
        })
        .then((result) => {
          const token = createToken();
          res
            .status(201)
            .json({ token: token, user: { email: 'dummy@dummy.com' } });
        });
    })
    .catch((err) => {
      console.log(err);
      res.status(500).json({ message: 'Creating the user failed' });
    });
  ///ADD USER TO DATABASE....
});














--> MAS ISSO NÃO DEU CERTO:





xhr.js:210          POST http://localhost:3100/signup 500 (Internal Server Error)
dispatchXhrRequest @ xhr.js:210
xhrAdapter @ xhr.js:15
dispatchRequest @ dispatchRequest.js:58
request @ Axios.js:108
Axios.<computed> @ Axios.js:140
wrap @ bind.js:9
App.authHandler @ App.js:34
onSubmit @ Auth.js:34
callCallback @ react-dom.development.js:3945
invokeGuardedCallbackDev @ react-dom.development.js:3994
invokeGuardedCallback @ react-dom.development.js:4056
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4070
executeDispatch @ react-dom.development.js:8243
processDispatchQueueItemsInOrder @ react-dom.development.js:8275
processDispatchQueue @ react-dom.development.js:8288
dispatchEventsForPlugins @ react-dom.development.js:8299
(anônimo) @ react-dom.development.js:8508
batchedEventUpdates$1 @ react-dom.development.js:22396
batchedEventUpdates @ react-dom.development.js:3745
dispatchEventForPluginEventSystem @ react-dom.development.js:8507
attemptToDispatchEvent @ react-dom.development.js:6005
dispatchEvent @ react-dom.development.js:5924
unstable_runWithPriority @ scheduler.development.js:468
runWithPriority$1 @ react-dom.development.js:11276
discreteUpdates$1 @ react-dom.development.js:22413
discreteUpdates @ react-dom.development.js:3756
dispatchDiscreteEvent @ react-dom.development.js:5889




App.js:48 Error: Request failed with status code 500
    at createError (createError.js:16:1)
    at settle (settle.js:17:1)
    at XMLHttpRequest.onloadend (xhr.js:66:1)








O PROBLEMA ERA QUE EU HAVIA ESQUECIDO o '.db()"



em 




'''

  const db = getDb().db();




  '''











  --> agora deu certo:










router.post('/signup', (req, res, next) => {
  const email = req.body.email;
  const password = req.body.password;

  const db = getDb().db();

  bcrypt
    .hash(password, 12)
    .then((hashedPassword) => {
      //Store hashedPassword in Database....
      console.log(hashedPassword);
      db.collection('users')
        .insertOne({
          email: email,
          password: hashedPassword,
        })
        .then((result) => {
          const token = createToken();
          res
            .status(201)
            .json({ token: token, user: { email: 'dummy@dummy.com' } });
        });
    })
    .catch((err) => {
      console.log(err);
      res.status(500).json({ message: 'Creating the user failed' });
    });
  ///ADD USER TO DATABASE....
});















--> talvez fosse legal deixar ele com um field de 'products: []'...










--> ou será que não?










-------> esse hash do password é um pedaço do 


'
ENCRYPTION AT REST'... --> mesmo que nossa 



database seja comprometida, nossos passwords não estarão 



disponíveis como plain text...








-> certo....









------------








O PROFESSOR EXPLICA QUE ELE USARÁ UM 'TOKEN-BASED AUTH APPROACH'..
.




ex:





        .then((result) => {
          const token = createToken();
          res
            .status(201)
            .json({ token: token, user: { email: 'dummy@dummy.com' } });
        });
    })













    --> ISSO SIGNIFICA QUE 


    ELE 


    VAI __ CRIAR__ 1 TOKEN,
    QUE 



    ELE 

    VAI 

    RETORNAR 

    AO 

    REACT APP,



    QUE ENTÃO 
    VAI 


    'THEORETICALLY' HANDLAR 

    ESSE TOKEN 

    PARA 



    'AUTHENTICATE ITSELF AGAINST MY BACKEND, FOR FUTURE REQUESTS'.... --> E isso 


    é 


    um pouco além do 



    escopo desse CURSO,



    mas isso 


    é abordado no curso de node do professor,que 



    já estudei... 












    -->     ok, ele cria essa token e a envia....














    --> OK... E O CREATE TOKEN,
     


     BTW,




     É 



     AQUELA FUNCTION DE 






     ''''

     const createToken = () => {
  return jwt.sign({}, 'secret', { expiresIn: '1h' });
};




''''








----> isso aí cria uma 'json web token' --> O PROFESSOR EXPLICA BEM MAIS SOBRE ISSO 


NO CURSO DE NODE...













--> naquela ocasião, meu código havia sido bem mais complexo:



















const User = require('../models/user');

const { validationResult } = require('express-validator');

const { hash, compare } = require('bcryptjs');

const jwt = require('jsonwebtoken'); //necessário para o generate de JSON WEB TOKENS, para authenticate o user...

exports.signup = (req, res, next) => {
  const errors = validationResult(req);

  if (!errors.isEmpty()) {
    const error = new Error('Validation failed.');
    error.statusCode = 422;
    error.data = errors.array(); ///array com todos os errors ocorridos durante o validation.... ////esse pass de errors é totalmente opcional, mas é bom se você quer que o user/desenvolvedores tenham o array de errors na response, quando errors ocorrerem....
    throw error; //será capturado por nosso MAIN ERROR HANDLING MIDDLEWARE, lá em 'app.js'...
  }

  const email = req.body.email;
  const name = req.body.name;
  const password = req.body.password;

  hash(password, 12)
    .then((hashedPassword) => {
      const user = new User({
        email: email,
        name: name,
        password: hashedPassword,
      });

      return user.save(); ///retornamos para usar o then block subsequente....
    })
    .then((result) => {
      console.log(result);
      res.status(201).json({
        message: 'User was created successfully!',
        userId: result._id,
      });
    })
    .catch((err) => {
      console.log(err);
      if (!err.statusCode) {
        err.statusCode = 500;
      }
      next(err);
    });
};

exports.login = (req, res, next) => {
  const email = req.body.email;
  const password = req.body.password;
  let loadedUser;

  User.findOne({ email: email })
    .then((user) => {
      if (!user) {
        const error = new Error(
          'No user could be found for the entered email.'
        );
        error.statusCode = 404;
        throw error;
      }
      loadedUser = user; ///aqui armazenamos a data de nosso user naquela variável inicial... vamos o utilizar mais para baixo, em execuções dentro dessa promise chain...
      return compare(password, user.password);
    })
    .then((isEqual) => {
      if (!isEqual) {
        const error = new Error('Invalid Password. Please try again.');
        error.statusCode = 401; //'unauthenticated'...
        throw error;
      } else {
        const token = jwt.sign(
         
         
          {
              ///// PRIMEIRO ARGUMENTO = DATA QUE VOCê QUER QUE SEJA RETORNADA, NA SUA JSON WEB TOKEN, AO USER (nunca coloque o hashedPassword, essa é a única regra... common practice é retornar o email...) --> aqui retornamos o 'userId' pq vamos o utilizar em coisas como 'deletePost'...
            email: loadedUser.email,
            userId: loadedUser._id,
          },  //////SEGUNDO ARGUMENTO = 'SECRET', OU A 'PRIVATE KEY' usada no GENERATE DA ASSINATURA (signature) dessa JSON WEB TOKEN --> É BOM USAR STRINGS ALEATÓRIAS E BEM LONGAS, para deixar seguro.... use o site mkjwk.org....
          'zVzS42wNmzOOmlRgYCNWE1dxTH4n_sL6JuDnNj2srF2B7YxRsAgVmvqO8z14Wd3nzOqXzseBAjJ7PA5RSzjs0GsdrR5nxrVu8NPQJjooJLq2GqEl4h9JxwJ8zg5d_Fl2l3Q3n8yf13Gydum25V3mYRUy--L1EskSMs2PcEXLOJM', //private key/secret ---> SERÁ CONHECIDA APENAS PELO SERVER...
          {
            ////TERCEIRO ARGUMENTO, ARGUMENTO DE OPTIONS...
            //////TERCEIRO ARGUMENTO = 'OBJETO CONFIG' --> você define CARACTERÍSTICAS DESSA WEBTOKEN: quando ela deve expirar,
            expiresIn: '1h', ///JSON WEB TOKEN VAI EXPIRAR EM 1 HORA... (no browser do user...) --> boa medida de segurança, pq aí se o token do user, no browser do user, for roubado por um user malicioso, essa token logo expirará, em 1 hora....
          }
        );

        res.status(200).json({
          token: token, //vamos querer enviar isso ao nosso frontend, para que seja armazenada...
          userId: loadedUser._id.toString(), ///também vamos querer enviar isso ao nosso frontend, para que seja armazenado.... (e então utilizado no frontend/app react)....
        });
      }
    })
    .catch((err) => {
      if (!err.statusCode) {
        err.statusCode = 500;
      }

      next(err);
    });
};









---------------------











ok, mas é uma token meio bosta, essa aí que o professor criou agora... (a do curso anterior era bem melhor)...












--> mas o que interessa é que o frontend e o backend estão funcionando conjuntamente, de certa forma... --> 




nosso user realmente está sendo criado,


e aí somos redirecionados à frontpage com nossa token.. 








--> a token é enviada de volta na response, mas não é armazenada em lugar algum...












--> ok, mas estamos estudando o mongodb,


e não 




a authentication do node.... (já vimos isso)...

















------------> nós temos 1 problema ---> SE NÓS INPUTTAMOS A MESMA DATA MAIS UMA VEZ (



   ou seja, o MESMO USER,



   com o mesmo password
),








O DOCUMENT É CRIADO MESMO ASSIM....










--> E ISSO É BEM RUIM... --> NA PRÓXIMA LIÇÃO VAMOS VER COMO PODEMOS 




CONSERTAR ISSO; ASSEGURAR QUE 'email' fique como 'unique'... ----> acho que 

já sei a solução,


a solução 

é 


'addToSet'... (ou algo assim; é aquela alternativa a 'insertOne' que não deixa REPETIR 1 FIELD...)















--> CLARO QUE UMA ALTERNATIVA É RODAr 'find' antes do 





'insertOne',

e aí 



colocar um error block 



que responda a 1 document com esse email sendo encontrado...








--> talvez colocar cada 'email' como um UNIQUE INDEX...







--> exato, é essa a solução....










--> mas como fazemos isso, mesmo?







--> precisamos do mongoshell....









-_> escrevemos assim:








MongoDB Enterprise atlas-gc0c6b-shard-0:PRIMARY> show collections
dummy
products
users
MongoDB Enterprise atlas-gc0c6b-shard-0:PRIMARY> db.users.createIndex({email: 1}, {unique: true})
{
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "createdCollectionAutomatically" : false,
        "commitQuorum" : "votingMembers",
        "ok" : 1,
        "$clusterTime" : {
                "clusterTime" : Timestamp(1646535144, 5),
                "signature" : {
                        "hash" : BinData(0,"WPKWyfTDY63pj38CaQDAu2zpwGI="),
                        "keyId" : NumberLong("7026883533561921537")
                }
        },
        "operationTime" : Timestamp(1646535144, 5)
}
MongoDB Enterprise atlas-gc0c6b-shard-0:PRIMARY> 














--> ISSO COLOCOU ESSE 'email' como UNIQUE --> o que significa que 


NÃO SERÁ POSSÍVEL CRIAR 



1 

USER COM ESSE 

MESMO 


EMAIL,



na nossa database...










-> OK, ISSO FUNCIONOU... --> MAS 

HÁ UM PROBLEMA COM TUDO ISSO... -> 


esse 

está como um 'UNHANDLED ERROR '--> significa que 



nosso 




nodejs 

server 

ESTÁ CRASHANDO por conta disso....











--> TENHO QUE FAZER HANDLE DESSA EXCEPTION...








ESTE CATCH BLOCK:







        .catch(
          (err) => {
            console.log(err);
          }
        )












        --> FAZ COM QUE O APP NÃO CRASHE, 




        mas ainda assim, não é uma boa user experience (user é redirecionado para a página principal, e não é mencionado um erro a ele)....










        EIS O CÓDIGO:







        router.post('/signup', (req, res, next) => { ////queremos que não sjea possível criar vários users com o mesmo email...
  const email = req.body.email;
  const password = req.body.password;

  const db = getDb().db();

  bcrypt
    .hash(password, 12)
    .then((hashedPassword) => {
      //Store hashedPassword in Database....
      console.log(hashedPassword);
      db.collection('users')
        .insertOne({
          email: email,
          password: hashedPassword,
        })
        .catch(
          (err) => {
            console.log(err);
          }
        )
        .then((result) => {
          const token = createToken();
          res
            .status(201)
            .json({ token: token, user: { email: 'dummy@dummy.com' } });
        });
    })
    .catch((err) => {
      console.log(err);
      res.status(500).json({ message: 'Creating the user failed' });
    });
  ///ADD USER TO DATABASE....
});




---------------------------






OK.... O NEGÓCIO REALMENTE FUNCIONA... 





--> Professor explica que podemos, se quisermos, fazer handle do error de forma diferente,

mas o que interessa é que 





agora 



NÃO É POSSÍVEL 


FAZER 



USERS DUPLICADOS a partir de 'email',

tudo por meio desse UNIQUE INDEX..









OK, FIZ 1 HANDLING BÁSICO, LÁ NO 'APP.JS':









  authHandler = (event, authData) => {
    event.preventDefault();
    if (authData.email.trim() === '' || authData.password.trim() === '') {
      return;
    }
    let request;
    if (this.state.authMode === 'login') {
      request = axios.post('http://localhost:3100/login', authData);
    } else {
      request = axios.post('http://localhost:3100/signup', authData);
    }
    request
      .then(authResponse => {
        if (authResponse.status === 201 || authResponse.status === 200) {
          const token = authResponse.data.token;
          console.log(token);
          // Theoretically, you would now store the token in localstorage + app state
          // and use it for subsequent requests to protected backend resources
          this.setState({ isAuth: true });
        }
      })
      .catch(err => {
        this.errorHandler(err.response.data.message);
        this.setState({ isAuth: false });
        alert('Email already taken, please choose another one.')
        console.log('NOTAUTH')
      });
  };










  -> agora só falta a última aula do módulo...