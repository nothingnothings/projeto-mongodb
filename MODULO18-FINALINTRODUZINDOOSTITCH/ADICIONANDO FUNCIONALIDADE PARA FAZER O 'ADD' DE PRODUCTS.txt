










--> VAMOS IMPLEMENTAR O ADD DE PRODUCTS COM O 



MONGODB STITCH...














--> meu código de add atualmente está assim:














else {
      request = axios.post('http://localhost:3100/products', productData);
    }
    request
      .then((result) => {
        this.setState({ isLoading: false });
        this.props.history.replace('/products');
      })
      .catch((err) => {
        this.setState({ isLoading: false });
        console.log(err);
        this.props.onError(
          'Editing or adding the product failed. Please try again.'
        );
      });
  };










  ok, essa coisa do 'get a single product data' 


  lá no edit/add 

  eu consegui fazer...












  O CÓDIGO FICOU TIPO ASSIM:










  componentDidMount() {
    ///Will be 'edit' or 'add'

    const mongodb = Stitch.defaultAppClient.getServiceClient(
      RemoteMongoClient.factory,
      'mongodb-atlas'
    );

    if (this.props.match.params.mode === 'edit') {
      //   axios
      //     .get('http://localhost:3100/products/' + this.props.match.params.id)
      //     .then((productResponse) => {
      //       const product = productResponse.data;
      //       this.setState({
      //         isLoading: false,
      //         title: product.name,
      //         price: product.price.toString(),
      //         imageUrl: product.image,
      //         description: product.description,
      //       });
      //     })
      //     .catch((err) => {
      //       this.setState({ isLoading: false });
      //       console.log(err);
      //     });
      // } else {
      //   this.setState({ isLoading: false });
      // }
    }

    mongodb
      .db('shop2')
      .collection('products')
      .find({
        // _id: this.props.match.params.id
        _id: BSON.ObjectId(this.props.match.params.id),
      })
      .toArray()
      .then((productResponse) => {
        console.log(productResponse[0]);
        this.setState({
          title: productResponse[0].name,
          isLoading: false,
          price: productResponse[0].price,
          imageUrl: productResponse[0].image,
          description: productResponse[0].description,
        });
      })
      .catch((err) => {
        this.props.onError(
          'Fetching the product failed. Please try again later.'
        );
      });
  }






    editProductHandler = (event) => {
    event.preventDefault();
    console.log('TEST');
    if (
      this.state.title.trim() === '' ||
      this.state.price.trim() === '' ||
      this.state.imageUrl.trim() === '' ||
      this.state.description.trim() === ''
    ) {
      return;
    }

    this.setState({ isLoading: true });

    const productData = {
      name: this.state.title,
      price: parseFloat(this.state.price),
      image: this.state.imageUrl,
      description: this.state.description,
    };

    let request;

    const mongodb = Stitch.defaultAppClient.getServiceClient(
      RemoteMongoClient.factory,
      'mongodb-atlas'
    );

    if (this.props.match.params.mode === 'edit') {
      // request = axios.patch(
      //   'http://localhost:3100/products/' + this.props.match.params.id,
      //   productData
      // );

      request = mongodb.updateOne(
        { _id: new BSON.ObjectId(this.props.match.params.id) },
        productData
      );
    } else {
      // request = axios.post('http://localhost:3100/products', productData);
      request = mongodb.insertOne({
        productData,
      });
    }
    request
      .then((result) => {
        this.setState({ isLoading: false });
        this.props.history.replace('/products');
      })
      .catch((err) => {
        this.setState({ isLoading: false });
        console.log(err);
        this.props.onError(
          'Editing or adding the product failed. Please try again.'
        );
      });
  };















  --> OK... MAS AINDA ESTOU COM UM PROBLEMA,



  O CÓDIGO DIZ QUE 'mongodb.updateOne()"




  NÃO É UMA FUNÇÃO... (is not a function)...










--> provavelmente é pq TENHO QUE CONVERTER 





os data types vindos lá 

do 





stitch...

(

    o price está como 'decimal128'...
)










--> obs:



// import { Decimal128 } from 'mongodb';




--> esse import NÃO FUNCIONA NO FRONTEND...
(

    só no backend....
)








JÁ ESTE AQUI FUNCIONA:



import { Decimal128 } from 'bson';
















--> ok... mas o UPDATEONE NÃO ESTÁ FUNCIONANDO... --> tvz pq esqueci o '$set'...












--> talvez seja pq 


eu esqueci de adicionar essa permissão de 'edit' para 

users ANONIMOS DE NOSSO APP... ( o que seria ruim)...















--> O PROFESSOR TBM GANHOU UM ERROR:



'UNEXPECTED TOKEN'...










-> TEM A VER COM AS PERMISSIONS DOS USERS... --> n temos permissão para 





editar/inserir data, por isso o professor ganhou aquele erro 403 (que é um erro de 'unauth')...








-- >TEMOS QUE IR NAS NOSSAS STITCH RULES E COLOCAR O 'WRITE'... (a caixa de 'write')...
















-_> entretanto, mesmo com isso, ainda recebemos o error de 'updateOne' is not a function...












--> consertei o error, eu havia esquecido o 



'.db('shop2').collection('products')...







--> OK, AGORA ESTÁ TUDO FUNCIONANDO....











--> AGORA PRECISAMOS ADICIONAR UNS USERS DIFERENCIADOS, PARA DISTINGUIR ENTRE OS USERS 'ANON' e os 'users fodoes' de nosso app....