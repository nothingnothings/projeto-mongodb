










BEM PARECIDO COM O INSERTONE,



FICAMOS COM O CÓDIGO ASSIM:






import React, { Component } from 'react';

import axios from 'axios';

import './EditProduct.css';

import Input from '../../components/Input/Input';

import Button from '../../components/Button/Button';

import { Stitch, RemoteMongoClient } from 'mongodb-stitch-browser-sdk';

// import { Decimal128 } from 'mongodb';

import BSON from 'bson';

class ProductEditPage extends Component {
  state = {
    isLoading: true,
    title: '',
    price: '',
    imageUrl: '',
    description: '',
  };

  componentDidMount() {
    ///Will be 'edit' or 'add'

    const mongodb = Stitch.defaultAppClient.getServiceClient(
      RemoteMongoClient.factory,
      'mongodb-atlas'
    );

    if (this.props.match.params.mode === 'edit') {
      //   axios
      //     .get('http://localhost:3100/products/' + this.props.match.params.id)
      //     .then((productResponse) => {
      //       const product = productResponse.data;
      //       this.setState({
      //         isLoading: false,
      //         title: product.name,
      //         price: product.price.toString(),
      //         imageUrl: product.image,
      //         description: product.description,
      //       });
      //     })
      //     .catch((err) => {
      //       this.setState({ isLoading: false });
      //       console.log(err);
      //     });
      // } else {
      //   this.setState({ isLoading: false });
      // }


      mongodb
      .db('shop2')
      .collection('products')
      .find({
        // _id: this.props.match.params.id
        _id: BSON.ObjectId(this.props.match.params.id),
      })
      .toArray()
      .then((productResponse) => {
        console.log(productResponse[0]);
        this.setState({
          title: productResponse[0].name,
          isLoading: false,
          // price: productResponse[0].price, //formato 'Decimal128' --> imprestável para o javascript... deve ser convertido em DOUBLE 64...
           price: productResponse[0].price.toString(),
          imageUrl: productResponse[0].image,
          description: productResponse[0].description,
        });
      })
      .catch((err) => {
        this.props.onError(
          'Fetching the product failed. Please try again later.'
        );
      });


    } else {
      this.setState({isLoading: false})
    }


  }

  editProductHandler = (event) => {
    event.preventDefault();
    console.log('TEST');
    if (
      this.state.title.trim() === '' ||
      this.state.price.trim() === '' ||
      this.state.imageUrl.trim() === '' ||
      this.state.description.trim() === ''
    ) {
      return;
    }

    this.setState({ isLoading: true });

    const productData = {
      name: this.state.title,
      // price: parseFloat(this.state.price), ////deve ser um DECIMAL, um decimal128...
      price: BSON.Decimal128.fromString(this.state.price.toString()),
      image: this.state.imageUrl,
      description: this.state.description,
    };

    let request;

    const mongodb = Stitch.defaultAppClient.getServiceClient(
      RemoteMongoClient.factory,
      'mongodb-atlas'
    );

    if (this.props.match.params.mode === 'edit') {
      // request = axios.patch(
      //   'http://localhost:3100/products/' + this.props.match.params.id,
      //   productData
      // );

      request = mongodb.db('shop2').collection('products').updateOne(
        { _id: new BSON.ObjectId(this.props.match.params.id) },

        productData
      );
    } else {
      // request = axios.post('http://localhost:3100/products', productData);
      request = mongodb.db('shop2').collection('products').insertOne(productData);
    }
    request
      .then((result) => {
        this.setState({ isLoading: false });
        this.props.history.replace('/products');
      })
      .catch((err) => {
        this.setState({ isLoading: false });
        console.log(err);
        this.props.onError(
          'Editing or adding the product failed. Please try again.'
        );
      });
  };

  inputChangeHandler = (event, input) => {
    this.setState({ [input]: event.target.value });
  };

  render() {
    let content = (
      <form className="edit-product__form" onSubmit={this.editProductHandler}>
        <Input
          label="Title"
          config={{ type: 'text', value: this.state.title }}
          onChange={(event) => this.inputChangeHandler(event, 'title')}
        />
        <Input
          label="Price"
          config={{ type: 'number', value: this.state.price }}
          onChange={(event) => this.inputChangeHandler(event, 'price')}
        />
        <Input
          label="Image Url"
          config={{ type: 'text', value: this.state.imageUrl }}
          onChange={(event) => this.inputChangeHandler(event, 'imageUrl')}
        />
        <Input
          label="Description"
          elType="textarea"
          config={{ type: 'textarea', value: this.state.description }}
          onChange={(event) => this.inputChangeHandler(event, 'description')}
        />
        <Button type="submit">
          {this.props.match.params.mode === 'add'
            ? 'Create Product'
            : 'Update Product'}
        </Button>
      </form>
    );

    if (this.state.isLoading) {
      content = <p>Is loading...</p>;
    }
    return <main>{content}</main>;
  }
}

export default ProductEditPage;










------------------






ok, agora temos toda crud functionality adicionada... --> tudo com o mongodb stitch, de uma maneira super safe...










--> MAS AGORA DEVEMOS ADICIONAR USERS, 

PARA QUE NEM TODOS POSSAM 

FAZER 



TUDO 



DE NOSSO APP (delete, update, insert, etc)...








