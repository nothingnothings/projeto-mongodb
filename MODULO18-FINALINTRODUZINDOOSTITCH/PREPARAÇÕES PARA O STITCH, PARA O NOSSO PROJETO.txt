












---> VAMOS COMEÇAR COM O STITCH... 







-> O TRABALHO COM O STITCH SEMPRE COMEÇA __ _DE DENTRO __ DO CONSOLE 



DA SUA DATABASE MONGODB ATLAS....










--> LÁ NÓS TEMOS NOSSO CLUSTER.... --> e aí, podeoms 







clicar na opção de 'stitch apps'...











--> LÁ, CLIQUE EM 'CREATE NEW APPLICATIOn',



e aí invente um nome... --> LINKE 


ESSE 



APP STITCH AO SEU CLUSTER (cluster0),












E AÍ ___ CLIQUE EM 'CREATE'... 












--> OK.... --> ISSO VAI DEMORAR 1 POUCO, 1-3 MINUTOS...












--> POR ENQUANTO, BAIXE A VERSÃO LEVEMENTE MODIFICADA DO APP QUE CONSTRUÍMOS 

NO ÚLTIMO MÓDULO....










--> ok... 'npm install '--> 






isso vai instalar todas as dependencies.... -> 








mas eu posso fazer isso manualmente..














--> depois rode 'npm start' --> 



ISSO 



VAI 


RODAR O FRONTEND 










--> QUANTO AO BACKEND,

NÃO VAMOS MAIS O UTILIZAR,

PQ 

AGORA 


VAMOS 



USAR 




O SERVER/BACKEND 

DO 

STITCH....









---> o stitch mudou , agora o nome dele é 'REALM'...






https://docs.mongodb.com/realm/web/migrate/







If you have an existing app built with the Stitch SDK, you should migrate your app to use the new Realm SDK. While much of the application logic and flow of information hasn't changed, there are a few changes to how the new SDK connects to the realm backend.













--> 1
INSTALL THE SDK
In your Node.js project directory, use the following command to add Realm to your project:
npm install --save realm







https://realm.mongodb.com/groups/605e201af9f3ec30eb653394/apps/6226ce0f5206caf9890917c8/sdks

















--> ok... é isso que devemos fazer...











---> O PROFESSOR TAMBÉM ALTEROU ALGUNS CÓDIGOS LÁ NA PAGE DE 'Auth',



e também admite que alterou algumas coisas, que se tornarão importantes MAIS TARDE...















--> OK... VOU PREPARAR MEU APP...












--> NA PRÓXIMA LIÇÃO, VEREMOS COMO PODEMOS TRABALHAR COM O STITCH...










ok... são as mesmas dependencies do projeto anterior... nada de novo....






ex:







{
  "name": "mongodb-demo",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "axios": "^0.18.0",
    "bcryptjs": "^2.4.3",
    "body-parser": "^1.18.3",
    "express": "^4.16.3",
    "jsonwebtoken": "^8.3.0",
    "mongodb": "^3.1.6",
    "react": "^16.5.1",
    "react-dom": "^16.5.1",
    "react-router-dom": "^4.3.1",
    "react-scripts": "1.1.5"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject",
    "start:server": "node ./backend/app.js"
  }
}







bem, no 'App.js' do frontend HÁ UMA PEQUENA ALTERAÇÃO:





       <Route path="/confirm-account" component={ConfirmAccountPage} />











       --> É ESSA ROUTE AÍ....










       ficou tipo assim:



















       import React, { Component } from 'react';
import { Switch, Route, Redirect } from 'react-router-dom';
import axios from 'axios';

import Header from './components/Header/Header';
import Modal from './components/Modal/Modal';
import Backdrop from './components/Backdrop/Backdrop';
import ProductsPage from './pages/Product/Products';
import ProductPage from './pages/Product/Product';
import EditProductPage from './pages/Product/EditProduct';
import AuthPage from './pages/Auth/Auth';
import ConfirmAccountPage from './pages/Auth/ConfirmAccount';

class App extends Component {
  state = {
    isAuth: false,
    authMode: 'login',
    error: null
  };

  logoutHandler = () => {
    this.setState({ isAuth: false });
  };

  authHandler = (event, authData) => {
    event.preventDefault();
    if (authData.email.trim() === '' || authData.password.trim() === '') {
      return;
    }
    let request;
    if (this.state.authMode === 'login') {
      request = axios.post('http://localhost:3100/login', authData);
    } else {
      request = axios.post('http://localhost:3100/signup', authData);
    }
    request
      .then(authResponse => {
        if (authResponse.status === 201 || authResponse.status === 200) {
          const token = authResponse.data.token;
          console.log(token);
          // Theoretically, you would now store the token in localstorage + app state
          // and use it for subsequent requests to protected backend resources
          this.setState({ isAuth: true });
        }
      })
      .catch(err => {
        this.errorHandler(err.response.data.message);
        console.log(err);
        this.setState({ isAuth: false });
      });
  };

  authModeChangedHandler = () => {
    this.setState(prevState => {
      return {
        authMode: prevState.authMode === 'login' ? 'signup' : 'login'
      };
    });
  };

  errorHandler = message => {
    this.setState({
      error: message
    });
  };

  render() {
    let routes = (
      <Switch>
        <Redirect from="/" to="/products" exact />
        <Redirect from="/auth" to="/products" exact />
        <Redirect from="/signup" to="/products" exact />
        <Route
          path="/product/:mode"
          render={props => (
            <EditProductPage {...props} onError={this.errorHandler} />
          )}
        />
        <Route
          path="/products/:id/:mode"
          render={props => (
            <EditProductPage {...props} onError={this.errorHandler} />
          )}
        />
        <Route
          path="/products/:id"
          render={props => (
            <ProductPage {...props} onError={this.errorHandler} />
          )}
        />
        <Route
          path="/products"
          render={props => (
            <ProductsPage {...props} onError={this.errorHandler} />
          )}
        />
      </Switch>
    );

    if (!this.state.isAuth) {
      routes = (
        <Switch>
          <Redirect from="/" to="/auth" exact />
          <Redirect from="/products" to="/auth" />
          <Redirect from="/product" to="/auth" />
          <Route path="/confirm-account" component={ConfirmAccountPage} />
          <Route
            path="/auth"
            render={() => (
              <AuthPage
                mode={this.state.authMode}
                onAuth={this.authHandler}
                onAuthModeChange={this.authModeChangedHandler}
              />
            )}
          />
        </Switch>
      );
    }

    return (
      <div className="App">
        <Modal
          open={!!this.state.error}
          title="An Error Occurred"
          onClose={() => this.errorHandler(null)}
        >
          <p>{this.state.error}</p>
        </Modal>
        <Backdrop show={!!this.state.error} />
        <Header
          authenticated={this.state.isAuth}
          onLogout={this.logoutHandler}
        />
        {routes}
      </div>
    );
  }
}

export default App;












location.search returns the query portion of a URL including the Question mark (?). This return a string and then we do substring operation on













ok... fiz essas pequenas alterações...

