















--> na última lição adicionamos funcionalidades de delete:





  productDeleteHandler = (productId) => {

    console.log('DELETE_TRY');
    const mongodb = Stitch.defaultAppClient.getServiceClient(RemoteMongoClient.factory, 'mongodb-atlas');


    mongodb.db('shop2').collection('products').deleteOne(
      {
        _id: productId
      }
    )
    .then(
      () => {
            this.fetchData()
      }
    )
    .catch(
      (err) => {
        this.props.onError('Deleting the product failed. Please try again later.');
      }
    )








-----------------------------







MAS O QUE ESTÁ FALTANDO? 







BEM, QUEREMOS SER CAPAZES DE ACESSAR a page de 'details' (single product)




E 





FAZER INSERT/UPDATE DE PRODUCTS...















--> vamos precisar rodar esse código de 'connect ao stitch' (com o auth e tudo mais) 



LÁ 


NA PAGE 


DE 

'ProductPage' (que é o 'details")....












-> não, mas isso não funcionará:





Error: default app can only be set once; currently set to 'application-0-acjfk'


Function.Stitch.initializeDefaultAppClient

A:/projeto6-MONGODB/MODULO18-FINALINTRODUZINDOOSTITCH/novoprojeto22-uso-do-stitch/node_modules/mongodb-stitch-browser-core/dist/esm/core/Stitch.js:46
new ProductPage
A:/projeto6-MONGODB/MODULO18-FINALINTRODUZINDOOSTITCH/novoprojeto22-uso-do-stitch/src/pages/Product/Product.js:16
  13 | 
  14 |  constructor() {
  15 |    super();
> 16 |    const mongodb = Stitch.initializeDefaultAppClient('application-0-acjfk');
     | ^  17 |    mongodb.auth.loginWithCredential(new AnonymousCredential()); ///login 'anônimo'... --> é uma das options de login do stitch, lá no site do 'realm'...
  18 |  }
  19 | 













  -> talvez o certo seja outsourcear esse negócio, partindo de um file extra...







  --> ou então nem usar esse 'auth'... pode ser o correto....











  --> acho que a solução é colocar esse código de 'auth' BEM NO COMPONENT QUE RODA PRIMEIRO, QUE É 'App.js'... 





  tipo assim:














  import React, { Component } from 'react';
import { Switch, Route, Redirect } from 'react-router-dom';
import axios from 'axios';

import Header from './components/Header/Header';
import Modal from './components/Modal/Modal';
import Backdrop from './components/Backdrop/Backdrop';
import ProductsPage from './pages/Product/Products';
import ProductPage from './pages/Product/Product';
import EditProductPage from './pages/Product/EditProduct';
import AuthPage from './pages/Auth/Auth';
import ConfirmAccountPage from './pages/Auth/ConfirmAccount';


import { Stitch, AnonymousCredential } from 'mongodb-stitch-browser-sdk';




class AppFront extends Component {
  state = {
    isAuth: true,
    productPage: 0,
    authMode: 'login',
    error: null,
  };

  constructor() {
    super();
    const mongodb = Stitch.initializeDefaultAppClient('application-0-acjfk');
    mongodb.auth.loginWithCredential(new AnonymousCredential()); ///login 'anônimo'... --> é uma das options de login do stitch, lá no site do 'realm'...
  };

  


  logoutHandler = () => {
    this.setState({ isAuth: false });
  };

  authHandler = (event, authData) => {
    event.preventDefault();
    if (authData.email.trim() === '' || authData.password.trim() === '') {
      return;
    }
    let request;
    if (this.state.authMode === 'login') {
      request = axios.post('http://localhost:3100/login', authData);
    } else {
      request = axios.post('http://localhost:3100/signup', authData);
    }
    request
      .then((authResponse) => {
        if (authResponse.status === 201 || authResponse.status === 200) {
          const token = authResponse.data.token;
          console.log(token);
          // Theoretically, you would now store the token in localstorage + app state
          // and use it for subsequent requests to protected backend resources
          this.setState({ isAuth: true });
        }

        if (authResponse.status === 501) {
          alert('Email already taken, please choose another one.');
          console.log('NOTAUTH');
        }
      })
      .catch((err) => {
        this.errorHandler(err.response.data.message);
        this.setState({ isAuth: false });
      });
  };

  authModeChangedHandler = () => {
    this.setState((prevState) => {
      return {
        authMode: prevState.authMode === 'login' ? 'signup' : 'login',
      };
    });
  };

  errorHandler = (message) => {
    this.setState({
      error: message,
    });
  };

  render() {
    let routes = (
      <Switch>
        <Redirect from="/" to="/products" exact />
        <Redirect from="/auth" to="/products" exact />
        <Redirect from="/signup" to="/products" exact />
        <Route
          path="/product/:mode"
          render={(props) => (
            <EditProductPage {...props} onError={this.errorHandler} />
          )}
        />
        <Route
          path="/products/:id/:mode"
          render={(props) => (
            <EditProductPage {...props} onError={this.errorHandler} />
          )}
        />
        <Route
          path="/products/:id"
          render={(props) => (
            <ProductPage {...props} onError={this.errorHandler} />
          )}
        />
        <Route
          path="/products"
          render={(props) => (
            <ProductsPage {...props} onError={this.errorHandler} />
          )}
        />
      </Switch>
    );

    if (!this.state.isAuth) {
      routes = (
        <Switch>
          <Redirect from="/" to="/auth" exact />
          <Redirect from="/products" to="/auth" />
          <Redirect from="/product" to="/auth" />
          <Route path="/confirm-account" component={ConfirmAccountPage} />
          <Route
            path="/auth"
            render={() => (
              <AuthPage
                mode={this.state.authMode}
                onAuth={this.authHandler}
                onAuthModeChange={this.authModeChangedHandler}
              />
            )}
          />
        </Switch>
      );
    }

    return (
      <div className="App">
        <Modal
          open={!!this.state.error}
          title="An Error Occurred"
          onClose={() => this.errorHandler(null)}
        >
          <p>{this.state.error}</p>
        </Modal>
        <Backdrop show={!!this.state.error} />
        <Header
          authenticated={this.state.isAuth}
          onLogout={this.logoutHandler}
        />
        {routes}
      </div>
    );
  }
}

export default AppFront;





















--> como as 2 'pages' dependem desse app,



se coloco no nível mais topmost, o problema talvez é solucionado...










--> bem, agora estou conseguindo FETCHEAR TODOS OS PRODUCTS,

MAS A SINGLE PRODUCT PAGE AINDA NÃO ESTÁ FUNCIONANDO..













--> CONSEGUI... --> UMA SÉRIE DE PROBLEMAS:









1) o method de 'findOne()' NÃO ESTAVA FUNCIONANDO... (ESTAVA retornando 'null')









2) AÍ USEI METHOD DE 'find()', com o method de 'toArray()' para conseguir PARAR COM O ERROR DE '.find()' is not a function' 








3) ISSO FEITO, USEI O 'BSON.ObjectId()' para CONVERTER MINHA STRING EM UM OBJECTID, PARA CONSEGUIR ENCONTRAR ESSE DOCUMENT NA DATABASE....