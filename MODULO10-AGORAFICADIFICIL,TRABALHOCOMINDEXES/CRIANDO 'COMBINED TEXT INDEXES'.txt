















--> O PROFESSOR HAVIA MENCIONADO  que ''SÓ PODEMOS TER 1 ÚNICO TEXT INDEX POR  COLLECTION'' --> 




e isso é verdade...





 

 -> 




 SE ESCREVEMOS 









'db.products.getIndexes()' 
,









RECEBEMOS ISTO:




> db.products.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_"
        },
        {
                "v" : 2,
                "key" : {
                        "_fts" : "text",
                        "_ftsx" : 1
                },
                "name" : "description_text",
                "weights" : {
                        "description" : 1
                },
                "default_language" : "english",
                "language_override" : "language",
                "textIndexVersion" : 3
        }
]











----------> 




OBSERVAMOS NOSSO ÚNICO TEXT INDEX,


este aqui:




        {
                "v" : 2,
                "key" : {
                        "_fts" : "text",
                        "_ftsx" : 1
                },
                "name" : "description_text",
                "weights" : {
                        "description" : 1
                },
                "default_language" : "english",
                "language_override" : "language",
                "textIndexVersion" : 3
        }










        --> VOCê PODE CONSTATAR QUE ELE ASSUMIU A DEFAULT LANGUAGE COMO 'english'...








------> PODEMOS MUDAR O 'english' para outra lingua, BTW.... veremos isso mais tarde....















--> OK.. MAS POR ENQUANTO,



TENTAMOS ADICIONAR UM OUTRO TEXT INDEX.... --> BEM, 


VAMOS FALHAR... -------> 





'indexOptionsConflict' -----> esse é um erro que 



ESSENCIALMENTE QUER DIZER ''TENTAMOS ADICIONAR UM INDEX QUE JÁ TEMOS NESSA COLLECTION'... (



    PQ VOCÊ SÓ PODE TER 1 ÚNICO TEXT INDEX POR COLLECTION...
)











--> O QUE PODEMOS FAZER, NO ENTANTO,

É MERGEAR 

O 

TEXT 

DE MÚLTIPLOS FIELDS EM 1 SÓ...









MAS PARA ISSO, PRIMEIRAMENTE PRECISAMOS __ DROPPAR__ O 

NOSSO 


TEXT INDEX 

antigo,



por meio de um código como 






db.products.dropIndex("description_text") 







( OU SEJA, PASSE O NAME DO SEU TEXT INDEX, exatametne assim, e sem escrever '{description: 1'}' )





















--> O DROP DE TEXT INDEXES É UM POUCO MAIS DIFÍCIL, DIZ O PROFESSOR... você deve droppar PELO NAME.. (index name)..














--_> COPIE O NAME,
LÁ COM 'getIndexes()'..












---> CERTO.... AGORA 

VAMOS QUERER 


CRIAR UM 

'
COMBINED TEXT INDEX' (


    text index de MÚLTIPLOS FIELDS...
)












-> PARA ISSO,

É NECESSÁRIA 

UMA SINTAXE DIFERENTE...










--> PODEMOS MERGEAR MÚLTIPLOS FIELDS,




por meio 


de SUA SIMPLES ENUMERAÇÕA,

TIPO ASSIM:











db.products.createIndex(
    {
        title: "text",
        description: "text"
    }
)













-> ISSO N QUER DIZER QUE SERÃO CRIADOS 'DOIS TEXT INDEXES',



E SIM 

SERÁ 

CRIADO 





APENAS 1 ÚNICO TEXT INDEX,


MAS 

1 

TEXT 

INDEX 

QUE 

VAI CONSIDERAR 





OS  2 FIELDS,

de 'title' e 

'description'...












-> agora quando rodamos uma 


SEARCH,

tipo assim:








db.find(
    {
        $text: {
            $search: "book" 
        }
    }
)








-> SERÁ CONSIDERADO, NESSE FIND,

TAMBÉM O FIELD de 'title'..








--------------------------















ok... isso é realmente útil....


